name: Spring & Elasticsearch Deployment Workflow
# Build java, build docker, push docker, connect to ec2, stop docker compose, delete docekr container & iamge,pull docker,docker compose up

on:
  push:
    branches:
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # 1. GitHub Actions가 저장소 체크아웃->여기부터 GitHub Actions 서버
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. Java 17 설치
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # 3. Gradle 빌드 
    - name: Build JAR with Gradle
      run: |
        ./gradlew clean build -x test

    # 4. Docker Hub 로그인
    - name: Login to Docker Hub
      env:
        DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
      run: |
        echo "${DOCKER_HUB_TOKEN}" | docker login -u "${DOCKER_HUB_USERNAME}" --password-stdin

    # 5. Docker 이미지 빌드 및 푸시->여기까지 GitHub Actions 서버
    - name: Build and Push Docker Image
      env:
        DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      run: |
        docker build -t ${DOCKER_HUB_USERNAME}/gil-project:latest .
        docker push ${DOCKER_HUB_USERNAME}/gil-project:latest

    # 6. EC2에서 Docker Compose 실행->여기부터는 ec2에서 실행되는 내용들
    - name: Deploy on EC2
      env:
        PEM_KEY: ${{ secrets.EC2_PEM_KEY }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USER }}
        DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
      run: |
        set -e
        trap 'rm -f key.pem' EXIT
        # PEM 키를 임시 파일로 저장
        echo "$PEM_KEY" > key.pem
        chmod 600 key.pem
        # SSH로 Docker 작업 수행
        ssh -i key.pem -o StrictHostKeyChecking=no ${USER}@${EC2_HOST} << EOF
          set -e
          cd /home/${USER}
          # Docker Hub 로그인
          echo "${DOCKER_HUB_TOKEN}" | docker login -u "${DOCKER_HUB_USERNAME}" --password-stdin

          # gil-project 컨테이너 정지 및 삭제, Elastic Search 는 그대로
          if [ -f docker-compose.yml ]; then
            docker compose stop gil-project || true
            docker compose rm -f gil-project || true
          fi

          # 기존 Docker 이미지 삭제
          docker images --filter=reference='${DOCKER_HUB_USERNAME}/gil-project*' --format "{{.ID}}" | xargs -r docker rmi -f || true

          # 최신 Docker 이미지 Pull
          docker pull ${DOCKER_HUB_USERNAME}/gil-project:latest

          # Docker Compose 실행
          if [ -f docker-compose.yml ]; then
            docker-compose up -d --force-recreate
          else
            echo "docker-compose.yml 파일이 없습니다. 작업이 중단됩니다."
            exit 1
          fi
        EOF
